<div 
    xmlns="http://www.w3.org/1999/xhtml" 
    xmlns:tal="http://xml.zope.org/namespaces/tal"
    xmlns:metal="http://xml.zope.org/namespaces/metal"
    metal:use-macro="api.main_template.macros['master']">

  <div metal:fill-slot="headinclude">
    <script src="${request.application_url}/static/js/flowplayer/example/flowplayer-3.2.2.min.js"></script>
    <style type="text/css">
      /* styling of the container. */
      a.myPlayer {
      display:block;
      width: 760px;
      height: 480px; 
      text-align:center;
      margin:0 15px 15px 0;
      float:left;
      border:1px solid #999;
      }
      
      /* play button */
      a.myPlayer img {
      margin-top:70px;
      border:0px;
      }
      
      /* when container is hovered we alter the border color */
      a.myPlayer:hover {
      border:1px solid #000;
      }
    </style>
  </div>

  <div metal:fill-slot="content">

    <!--<div id="content">-->

      <h1>Screencasts</h1> 

      <p>Screencasts which introduce BFG and demonstrate BFG features.</p>

      <div>

        <h2>Groundhog Series: Building a Microframework using BFG</h2>
        
        <div>
          
          <h3><a name="groundhog1">Groundhog 1: Mapping URLs to Code
          (35 minutes 49 seconds)</a></h3>
          
          <cite>August 3, 2010</cite>
          
          <p>In the first screencast in this series, we use BFG to begin
          building (with apologies to <a
          href="http://lucumr.pocoo.org/">Armin Ronacher</a>) a clone
          of the open source <a
          href="http://flask.pocoo.org">Flask</a> "microframework"
          that we name Groundhog.  At the end of the first video, we
          have built enough of Groundhog to allow users to map URLs to
          code in a way that will be familiar to Flask developers.</p>
          
          <a class="myPlayer"
             href="http://static.repoze.org/casts/groundhog1.flv"
             style="background-image:url('http://static.repoze.org/casts/groundhog1.jpg')">
            <img src="/static/images/play_large.png" alt="Groundhog 1"/>
          </a>

          <div style="clear: both">
     
            <a
                href="http://static.repoze.org/casts/groundhog1.py.txt">View
            the code for Groundhog #1</a>

          </div>
            
          <h3><a name="groundhog2">Groundhog 2: Generating URLs
          (24 minutes 56 seconds)</a></h3>
          
          <cite>August 4, 2010</cite>
          
          <p>In the second screencast in this series, we give
          Groundhog's users the ability to generate URLs based on
          routing patterns associated with user-defined view
          functions.  At the end of the second video, a Groundhog user
          can use the <code>url_for</code> method of the application
          to generate URLs which point into his application.  We also
          teach Groundhog how to redirect to slash-appended routes and
          we show off the interactive exception debugger (<a
          href="http://pylonshq.com/docs/en/0.9.7/thirdparty/weberror/#module-weberror.evalexception">WebError's
          <i>EvalException</i></a>).</p>
          
          <a class="myPlayer"
             href="http://static.repoze.org/casts/groundhog2.flv"
             style="background-image:url('http://static.repoze.org/casts/groundhog2.jpg')">
            <img src="/static/images/play_large.png" alt="Groundhog 2"/>
          </a>

          <div style="clear: both">
     
            <a
                href="http://static.repoze.org/casts/groundhog2.py.txt">View
            the code for Groundhog #2</a>

          </div>

          <h3><a name="groundhog3">Groundhog 3: HTML Templating
          (39 minutes 38 seconds)</a></h3>
          
          <cite>August 5, 2010</cite>
          
          <p>In the third screencast in this series, we allow
          Groundhog users to render HTML using <a
          href="http://jinja.pocoo.org/2/">Jinja2</a> and <a
          href="http://chameleon.repoze.org">Chameleon-ZPT</a> templates.  We
          add a <code>render_template</code> method of the Groundhog
          application object and we provide custom <i>renderer
          globals</i>.
          </p>
          
          <a class="myPlayer"
             href="http://static.repoze.org/casts/groundhog3.flv"
             style="background-image:url('http://static.repoze.org/casts/groundhog3.jpg')">
            <img src="/static/images/play_large.png" alt="Groundhog 3"/>
          </a>

          <div style="clear: both">
     
            <a
                href="http://static.repoze.org/casts/groundhog3.py.txt">View
            the code for Groundhog #3</a>

          </div>
            
        </div>

        
        <div style="clear:both">
          
          <script language="JavaScript">
            flowplayer("a.myPlayer", "/static/js/flowplayer/flowplayer-3.2.2.swf");
          </script>
        
        </div>
        
        
      </div>

  </div>

</div>


